<?php
// $Id: activity.admin.inc,v 1.1.2.41 2010/05/25 04:39:33 scottreynolds Exp $

/**
 * @file activity.admin.inc
 * Contains administrative forms for activity.module
 */

/**
 * Menu callback to display all the currently setup Activities.
 */
function activity_admin_overview() {
  $results = array();
  $sql = "SELECT ta.hook, ta.aid, a.label
          FROM {trigger_assignments} ta
          INNER JOIN {actions} a
            ON a.aid = ta.aid
          WHERE a.type = 'activity'";
  $results = db_query($sql, array(), array(
               'target' => 'slave',
               'fetch' => PDO::FETCH_ASSOC))->fetchAll();
  if (!empty($results)) {
    return theme('activity_settings_actions_list', array('results' => $results));
  }

  return t('There are no Activity Templates created yet. !link', array('!link' => l(t('Create one now.'), 'admin/structure/activity/create')));
}

/**
 * Form builder to select what type of Activity to record.
 */
function activity_create_form($form, &$form_state) {
  $hook_options = activity_form_options_hooks();

  $form['label'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#title' => t('Label'),
    '#weight' => -10,
    '#required' => TRUE,
  );

  $form['hook'] = array(
    '#title' => t('Choose your hook'),
    '#description' => t('The hook that this Activity will record messages.'),
    '#options' => $hook_options,
    '#type' => 'radios',
    '#required' => TRUE,
  );

  $form['next'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );
  return $form;
}

/**
 * Form submit callback to create the new ActivityActionHandler.
 */
function activity_create_form_submit($form, &$form_state) {
  // Save it once to get the aid.
  $aid = actions_save('activity_record', 'activity', array(), $form_state['values']['label']);

  // Now save the aid away to the parameters.
  $handler = activity_load_handler($form_state['values']['hook']);
  actions_save('activity_record', 'activity', array('aid' => $aid, 'templates' => array(), 'options' => ActivityActionHandler::defaultOptions($handler->optionDefinition())), $form_state['values']['label'], $aid);

  // Write to the trigger assignments.
  $record = array(
    'hook' => $form_state['values']['hook'],
    'weight' => 0,
    'aid' => $aid
  );
  drupal_write_record('trigger_assignments', $record);
  $form_state['redirect'] = array('admin/structure/activity/configure/' . $aid, array('query' => array('new' => 1)));
}

/**
 * Form builder for the Handler configuration.
 */
function activity_configure_handler_form($form, $form_state, ActivityActionHandler $action) {
  $form += array(
    '#tree' => TRUE,
    'options' => array(),
    'messages' => array(),
    'test' => array(),
    'label' => array(
      '#type' => 'textfield',
      '#default_value' => $action->label,
      '#title' => t('Label'),
      '#weight' => -10,
    ),
  );

  $form_state += array(
    'messages' => array(
      'en' => array(
        0 => 'Enter an Eid to test this message'
      ),
    ),
  );

  // Add in the handlers options and messages.
  $action->optionForm($form['options'], $form_state);
  $action->messagesForm($form['messages'], $form_state);

  $table_id = 'activity-test-table';
  $form['#actions_id'] = $action->actions_id;
  $form['test'] = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    'eid' => array(
      '#type' => 'textfield',
      '#title' => t('Enter the ID'),
      '#default_value' => '',
      '#size' => 5,
    ),
    'additional_arguments' => array(
      'argument1' => array(
        '#type' => 'textfield',
        '#title' => t('Argument 1'),
        '#size' => 25,
      ),
      'argument2' => array(
        '#type' => 'textfield',
        '#title' => t('Argument 2'),
        '#size' => 25,
      ),
    ),
    'submit_test' => array(
      '#type' => 'submit',
      '#value' => t('Test'),
      '#submit' => array('activity_message_test_submit'),
      '#ajax' => array(
        'callback' => 'activity_message_test_ajax_callback',
        'wrapper' => $table_id,
      ),
    ),
  );

  $rows = array();
  foreach ($form_state['messages'] as $lang => $messages) {
    foreach ($messages as $uid => $message) {
      $rows[] = array($lang, $uid, $message);
    }
  }
  $form['message_results'] = array(
    '#markup' => theme('table', array('header' => array(t('Language'), t('User id'), t('Message')),'rows' => $rows, 'attributes' => array('id' => $table_id))),
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['save_update'] = array(
    '#type' => 'submit',
    '#value' => t('Save and Update Existing'),
    '#access' => $action->batch && empty($_GET['new']),
  );
  $form['save_create'] = array(
    '#type' => 'submit',
    '#value' => t('Save and Create'),
    '#access' => $action->batch && !empty($_GET['new']),
  );
  return $form;
}

/**
 * Submit handler for the test button.
 */
function activity_message_test_submit($form, &$form_state) {
  $form_state['messages'] = array(
    'en' => array(
      0 => 'Failed Validation',
    ),
  );
  $handler = activity_handler_load($form['#actions_id']);
  $handler->options = $form_state['values']['options'];
  $handler->templates = $form_state['values']['messages'];

  $objects = $handler->loadObjects($form_state['values']['test']['eid']);
  drupal_alter('activity_objects', $objects, $handler->type);

  if ($handler->valid($form_state['values']['test']['eid'], $handler->determineActor($objects), REQUEST_TIME, $objects, $form_state['values']['test']['additional_arguments']['argument1'], $form_state['values']['test']['additional_arguments']['argument2'])) {
    $form_state['messages'] = $handler->tokenize($objects);
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * AJAX callback for the test ajax button.
 */
function activity_message_test_ajax_callback($form, $form_state) {
  return $form['message_results'];
}

/**
 * Form submit handler for the configuration form.
 */
function activity_configure_handler_form_submit($form, &$form_state) {
  $params = array(
    'aid' => $form['#actions_id'],
    'options' => $form_state['values']['options'],
    'templates' => $form_state['values']['messages'],
  );
  actions_save('activity_record', 'activity', $params, $form_state['values']['label'], $form['#actions_id']);

  if ($form_state['values']['op'] == t('Save and Update Existing')) {
    $batch = array(
      'title' => t('Regenerating @label messages', array('@label' => $form_state['values']['label'])),
      'operations' => array(
        array('activity_recreate_messages_step', array($form['#actions_id'])),
      ),
      'file' => drupal_get_path('module', 'activity') . '/activity.admin.inc',
    );
    batch_set($batch);
  }
  elseif ($form_state['values']['op'] == t('Save and Create')) {
    $batch = array(
      'title' => t('Generating @label messages', array('@label' => $form_state['values']['label'])),
      'operations' => array(
        array('activity_batch_regenerate_step', array($form['#actions_id'])),
      ),
      'file' => drupal_get_path('module', 'activity') . '/activity.admin.inc',
    );
    batch_set($batch);
  }
}

/**
 * Create the form for confirmation of deleting an activity action.
 *
 * @ingroup forms
 * @see activity_actions_delete_form_submit()
 */
function activity_actions_delete_form($form, &$form_state, $action) {
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $action->aid,
  );
  $form['delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete all activities'),
    '#description' => t('Delete all activities associated with this template'),
    '#default_value' => TRUE,
  );
  return confirm_form($form,
    t('Are you sure you want to delete the action %action?', array('%action' => $action->label)),
    'admin/structure/activity',
    t('This cannot be undone.'),
    t('Delete'), t('Cancel')
  );
}

/**
 * Process activity_actions_delete form submissions.
 *
 * Post-deletion operations for activity action deletion.
 */
function activity_actions_delete_form_submit($form, &$form_state) {
  $aid = $form_state['values']['aid'];
  $action = actions_load($aid);
  actions_delete($aid);

  if ($form_state['values']['delete']) {
    $batch = array(
      'title' => t('Deleting activities'),
      'operations' => array(
        array('activity_batch_delete', array($aid))
      ),
      'file' => drupal_get_path('module', 'activity') . '/activity.admin.inc',
    );
    batch_set($batch);
  }

  watchdog('activity', 'Deleted action %aid (%action)', array('%aid' => $aid, '%action' => $action->label));
  drupal_set_message(t('Action %action was deleted', array('%action' => $action->label)));
  $form_state['redirect'] = 'admin/structure/activity';
}

/**
 * Form builder to dispaly settings for activity module
 */
function activity_settings_form($form, &$form_state = NULL) {
  $form['activity_expiration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activity Expiration Settings'),
    '#element_validate' => array('activity_expire_validate'),
  );
  
  $form['activity_expiration']['activity_expire'] = array(
    '#type' => 'select',
    '#title' => t('Activity log purge'),
    '#description' => t("Allows you to set a time limit for storing activity records. Select 0 to keep all activity records."),
    '#options' => drupal_map_assoc(array(0, 3600, 7200, 14400, 21600, 43200, 86400, 604800, 1209600, 2419200, 7257600, 15724800, 31536000), 'format_interval'),
    '#default_value' => variable_get('activity_expire', 0),
  );
  
  $form['activity_expiration']['activity_min_count'] = array(
    '#type' => 'select',
    '#title' => t('Minimum Activities'),
    '#description' => t('This is the minimum number activities that the user must have created before deleting any old activities.'),
    '#options' => drupal_map_assoc(range(0, 200, 10)),
    '#default_value' => variable_get('activity_min_count', 0),
  );
  

  // Allow realms provided by modules.
  $realms = array();
  foreach (activity_cache_get('all_realms') as $realm => $information) {
    $realms[$realm] = $information['name'];
  }

  // Set up the default value for this set of checkboxes.
  $enabled = array();
  foreach (activity_cache_get('realms') as $realm => $information) {
    $enabled[$realm] = $realm;
  }

  $form['activity_access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activity Access Control'),
    '#attributes' => array('id' => 'activity-access-fieldset'),
  );
  $form['activity_access']['activity_access_realms'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Realms'),
    '#description' => t('Select the realms for which Activity access records should be recorded. These realms will allow a View to filter in more then just one users Activity.'),
    '#options' => $realms,
    '#default_value' => $enabled,
  );

  $form['activity_access']['activity_access_rebuild'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild Activity Access Table'),
    '#submit' => array('activity_access_batch_set'),
  );

  // This tells system_settings_form to use array_filter for the checkboxes.
  $form['array_filter'] = array('#type' => 'value', '#value' => TRUE);

  return system_settings_form($form);
}

/**
 * Element validate callback
 */
function activity_expire_validate($element, &$form_state) {
  if (empty($form_state['values']['activity_expire']) && !empty($form_state['values']['activity_min_count'])) {
    form_set_error('activity_expire', t('You must set a time limit in order to use the minimum count'));
  }
}

/**
 * Menu callback -- ask for confirmation of activity deletion
 */
function activity_delete_confirm($form, $form_state, $aid) {
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );

  return confirm_form($form,
    t('Are you sure you want to delete this activity?'),
    $_GET['destination'],
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Execute activity deletion
 */
function activity_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    activity_delete(array($form_state['values']['aid']));
  }

  $form_state['redirect'] = '<front>';
}

/**
 * FAPI form submit function for the activity_rebuild button.
 *
 * @param array $form
 *  The FAPI form structure array.
 *
 * @param array &$form_state
 *  The FAPI form state array.
 *
 * @return none
 */
function activity_access_batch_set($form, &$form_state) {
  // Address usability concern where the realms arn't set.
  $submitted_realms = array_filter($form_state['values']['activity_access_realms']);
  variable_set('activity_access_realms', $submitted_realms);

  $batch = array(
    'title' => t('Rebuilding Activity Access Table'),
    'operations' => array(
      array('activity_access_rebuild_process', array()),
    ),
    'file' => drupal_get_path('module', 'activity') . '/activity.admin.inc',
  );
  batch_set($batch);
  $form_state['redirect'] = 'admin/config/content/activity';
}

/**
 * Batch API processing operation. Rebuilding Access table.
 *
 * @param array $context
 *  The batch api context array.
 *
 * @return none
 */
function activity_access_rebuild_process(&$context) {
  if (!isset($context['sandbox']['last_aid'])) {
    // Set up the sandbox for the first time.
    $context['sandbox']['last_aid'] = 0;
    $context['sandbox']['progress'] = 0;

    // Activity can be happening on the site. Any Activity happening after this point
    // will not be rebuilt. This is ok, as in that case, the new Activity will receive
    // any and all new Activity Access Realms.
    $context['sandbox']['max'] = db_query("SELECT COUNT(aid) FROM {activity}")->fetchField();
  }
  // Process 100 Activities at a time.
  $limit = 100;

  $activities = db_select('activity', 'a')
    ->fields('a')
    ->condition('aid', $context['sandbox']['last_aid'], '>')
    ->range(0, $limit)
    ->execute()
    ->fetchAll();

  foreach ($activities as $activity) {
    $grants = activity_get_grants($activity);
    // Delete existing records.
    db_delete('activity_access')
      ->condition('aid', $activity->aid)
      ->execute();

    // Insert new ones.
    foreach ($grants as $realm => $values) {
      foreach ($values as $value) {
        $perm = new stdClass();
        $perm->aid = $activity->aid;
        $perm->realm = $realm;
        $perm->value = $value;
        drupal_write_record('activity_access', $perm);
      }
    }

    // Update sandbox variables.
    $context['sandbox']['last_aid'] = $activity->aid;
    $context['sandbox']['progress']++;
  }
  // Check if not finished.
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    // If finished, delete the sandbox.
    unset($context['sandbox']);
  } 
}

/**
 * Page callback to set up a batch process.
 *
 * @param $action
 *  ActivityActionsHandler to recreate messages for.
 */
function activity_admin_recreate(ActivityActionHandler $action) {
  $batch = array(
    'title' => t('Regenerating @label messages', array('@label' => $action->label)),
    'operations' => array(
      array('activity_recreate_messages_step', array($action->actions_id)),
    ),
    'file' => drupal_get_path('module', 'activity') . '/activity.admin.inc',
  );
  batch_set($batch);
  batch_process('admin/structure/activity');
}

/**
 * Batch operation callback to generate new messages.
 *
 * @param $action_id
 *   The {actions}.aid to generate messages for.
 * @param array $context
 *   The context of this batch operation.
 */
function activity_recreate_messages_step($action_id, &$context) {
  if (!isset($context['sandbox']['last_aid'])) {
    $context['sandbox'] = array(
      'last_aid' => 0,
      'progress' => 0,
      'max' => db_query("SELECT COUNT(aid) FROM {activity} WHERE actions_id = :action_id", array(":action_id" => $action_id))->fetchField(),
    );
  }
  $limit = 50;

  $records = db_select('activity', 'a')
    ->fields('a')
    ->condition('a.actions_id', $action_id)
    ->condition('a.aid', $context['sandbox']['last_aid'], '>')
    ->range(0, $limit)
    ->execute()
    ->fetchAll();
  $context['sandbox']['progress'] += count($records);
  activity_recreate_messages($records);

  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    unset($context['sandbox']);
  }
}

/**
 * Set a batch process to regenerate activity for a specific hook and op pair.
 *
 * @param $action
 *  ActivityActionHandler to create messages for.
 *
 * @return none
 */
function activity_batch_regenerate(ActivityActionHandler $action) {
  $batch = array(
    'title' => t('Creating @label messages', array('@label' => $action->label)),
    'operations' => array(
      array('activity_batch_delete', array($action->actions_id)),
      array('activity_batch_regenerate_step', array($action->actions_id))
    ),
    'file' => drupal_get_path('module', 'activity') . '/activity.admin.inc',
  );
  batch_set($batch);
  batch_process('admin/structure/activity');
}

/**
 * Batch deletion step.
 *
 * @param $aid
 *  The actions.aid for this template.
 * @param $batch_context
 *  The context array for this batch operation.
 */
function activity_batch_delete($aid, &$batch_context) {
  if (!isset($batch_context['sandbox']['last_activity_id'])) {
    $batch_context['sandbox']['last_activity_id'] = 0;
    $batch_context['sandbox']['progress'] = 0;
    $batch_context['sandbox']['max'] = db_query("SELECT COUNT(aid) FROM {activity} WHERE actions_id = :aid", array(':aid' => $aid))->fetchField();
  }
  $limit = 200;
  $activity_to_be_deleted = db_select('activity', 'a')
    ->fields('a', array('aid'))
    ->condition('a.aid', $batch_context['sandbox']['last_activity_id'], '>')
    ->condition('a.actions_id', $aid)
    ->orderBy('a.aid', 'ASC')
    ->range(0, $limit)
    ->execute()
    ->fetchAll();
  $activity_ids = array();
  if (!empty($activity_to_be_deleted)) {
    foreach ($activity_to_be_deleted as $row) {
      $activity_ids[] = $row->aid;
      $batch_context['sandbox']['last_activity_id'] = $row->aid;
      $batch_context['sandbox']['progress']++;
    }
    activity_delete($activity_ids);
  }

  // Check if not finished.
  if (!empty($activity_to_be_deleted) && $batch_context['sandbox']['progress'] < $batch_context['sandbox']['max']) {
    $batch_context['finished'] = $batch_context['sandbox']['progress'] / $batch_context['sandbox']['max'];
  }
  else {
    // If finished, delete the sandbox.
    unset($batch_context['sandbox']);
  }
  
}

/**
 * Batch regeneration step.
 *
 * @param $aid
 *  The actions.aid for this template.
 * @param $batch_context
 *  An array representing the context for the batch operation.
 */
function activity_batch_regenerate_step($aid, &$batch_context) {
  $handler = activity_handler_batchable_load($aid);
  if (empty($handler)) {
    // Return error? Done?
  }
  $limit = 50;

  // Set up the sandbox for the regeneration.
  if (!isset($batch_context['sandbox']['list'])) {
    $batch_context['sandbox']['progress'] = 0;
    $batch_context['sandbox']['last_eid'] = 0;
  }
  // Extracts $arguments and $total.
  extract($handler->listEids($batch_context['sandbox']['progress'], $limit));

  foreach ($arguments as $eid => $arguments) {
    // Ensure they are there.
    $arguments += array('argument1' => NULL, 'argument2' => NULL);
    activity_save_activity($handler, $eid, $arguments['argument1'], $arguments['argument2']);
    $batch_context['sandbox']['progress']++;
  }
  // Check if not finished.
  if ($batch_context['sandbox']['progress'] < $total) {
    $batch_context['finished'] = $batch_context['sandbox']['progress'] / $batch_context['sandbox']['max'];
  }
  else {
    // If finished, delete the sandbox.
    unset($batch_context['sandbox']);
  }
}